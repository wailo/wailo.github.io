// TypeScript bindings for emscripten-generated code.  Automatically generated at compile time.
declare namespace RuntimeExports {
    namespace GLFW {
        function WindowFromId(id: any): any;
        let joystickFunc: number;
        let errorFunc: number;
        let monitorFunc: number;
        let active: any;
        let scale: any;
        let windows: any;
        let monitors: any;
        let monitorString: any;
        let versionString: any;
        let initialTime: any;
        let extensions: any;
        let devicePixelRatioMQL: any;
        let hints: any;
        let primaryTouchId: any;
        let defaultHints: {
            131073: number;
            131074: number;
            131075: number;
            131076: number;
            131077: number;
            131082: number;
            135169: number;
            135170: number;
            135171: number;
            135172: number;
            135173: number;
            135174: number;
            135175: number;
            135176: number;
            135177: number;
            135178: number;
            135179: number;
            135180: number;
            135181: number;
            135182: number;
            135183: number;
            139265: number;
            139266: number;
            139267: number;
            139268: number;
            139269: number;
            139270: number;
            139271: number;
            139272: number;
            139276: number;
        };
        function DOMToGLFWKeyCode(keycode: any): 32 | 39 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 59 | 61 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 96 | 256 | 257 | 258 | 259 | 260 | 261 | 262 | 263 | 264 | 265 | 266 | 267 | 268 | 269 | 280 | 281 | 282 | 283 | 284 | 290 | 291 | 292 | 293 | 294 | 295 | 296 | 297 | 298 | 299 | 300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308 | 309 | 310 | 311 | 312 | 313 | 314 | 320 | 321 | 322 | 323 | 324 | 325 | 326 | 327 | 328 | 329 | 330 | 331 | 332 | 333 | 334 | 340 | 341 | 342 | 343 | 348 | -1;
        function getModBits(win: any): number;
        function onKeyPress(event: any): void;
        function onKeyChanged(keyCode: any, status: any): void;
        function onGamepadConnected(event: any): void;
        function onGamepadDisconnected(event: any): void;
        function onKeydown(event: any): void;
        function onKeyup(event: any): void;
        function onBlur(event: any): void;
        function onMousemove(event: any): void;
        function DOMToGLFWMouseButton(event: any): any;
        function onMouseenter(event: any): void;
        function onMouseleave(event: any): void;
        function onMouseButtonChanged(event: any, status: any): void;
        function onMouseButtonDown(event: any): void;
        function onMouseButtonUp(event: any): void;
        function onMouseWheel(event: any): void;
        function onCanvasResize(width: any, height: any, framebufferWidth: any, framebufferHeight: any): void;
        function onWindowSizeChanged(): void;
        function onFramebufferSizeChanged(): void;
        function onWindowContentScaleChanged(scale: any): void;
        function getTime(): number;
        function setWindowTitle(winid: any, title: any): void;
        function setJoystickCallback(cbfun: any): any;
        let joys: {};
        let lastGamepadState: any[];
        let lastGamepadStateFrame: any;
        function refreshJoysticks(): void;
        function setKeyCallback(winid: any, cbfun: any): any;
        function setCharCallback(winid: any, cbfun: any): any;
        function setMouseButtonCallback(winid: any, cbfun: any): any;
        function setCursorPosCallback(winid: any, cbfun: any): any;
        function setScrollCallback(winid: any, cbfun: any): any;
        function setDropCallback(winid: any, cbfun: any): any;
        function onDrop(event: any): boolean;
        function onDragover(event: any): boolean;
        function setWindowSizeCallback(winid: any, cbfun: any): any;
        function setWindowCloseCallback(winid: any, cbfun: any): any;
        function setWindowRefreshCallback(winid: any, cbfun: any): any;
        function onClickRequestPointerLock(e: any): void;
        function setInputMode(winid: any, mode: any, value: any): void;
        function getKey(winid: any, key: any): any;
        function getMouseButton(winid: any, button: any): boolean | 0;
        function getCursorPos(winid: any, x: any, y: any): void;
        function getMousePos(winid: any, x: any, y: any): void;
        function setCursorPos(winid: any, x: any, y: any): void;
        function getWindowPos(winid: any, x: any, y: any): void;
        function setWindowPos(winid: any, x: any, y: any): void;
        function getWindowSize(winid: any, width: any, height: any): void;
        function setWindowSize(winid: any, width: any, height: any): void;
        function defaultWindowHints(): void;
        function createWindow(width: any, height: any, title: any, monitor: any, share: any): any;
        function destroyWindow(winid: any): void;
        function swapBuffers(winid: any): void;
        function requestFullscreen(lockPointer: any, resizeCanvas: any): void;
        function updateCanvasDimensions(canvas: any, wNative: any, hNative: any): void;
        function calculateMouseCoords(pageX: any, pageY: any): {
            x: number;
            y: number;
        };
        function setWindowAttrib(winid: any, attrib: any, value: any): void;
        function getDevicePixelRatio(): number;
        function isHiDPIAware(): boolean;
        function isCSSScalingEnabled(): boolean;
        function adjustCanvasDimensions(): void;
        function getHiDPIScale(): any;
        function onDevicePixelRatioChange(): void;
        function GLFW2ParamToGLFW3Param(param: any): any;
    }
    let HEAPF32: any;
    let HEAPF64: any;
    let HEAP_DATA_VIEW: any;
    let HEAP8: any;
    let HEAPU8: any;
    let HEAP16: any;
    let HEAPU16: any;
    let HEAP32: any;
    let HEAPU32: any;
    let HEAP64: any;
    let HEAPU64: any;
    let FS_createPath: any;
    function FS_createDataFile(parent: any, name: any, fileData: any, canRead: any, canWrite: any, canOwn: any): void;
    function FS_createPreloadedFile(parent: any, name: any, url: any, canRead: any, canWrite: any, onload: any, onerror: any, dontCreateFile: any, canOwn: any, preFinish: any): void;
    function FS_unlink(path: any): any;
    let FS_createLazyFile: any;
    let FS_createDevice: any;
    let addRunDependency: any;
    let removeRunDependency: any;
}
interface WasmModule {
  _main(_0: number, _1: number): number;
  _api_fps(): number;
  _api_ups(): number;
  _api_weight(): number;
  _api_empty_weight(): number;
  _api_wing_area(): number;
  _api_dcl(): number;
  _api_cdo(): number;
  _api_thrust_to_weight(): number;
  _api_altitude(): number;
  _api_vertical_speed(): number;
  _api_alpha_tail(): number;
  _api_alpha_aileron(): number;
  _api_throttle(): number;
  _api_landing_gear_selector_position(): number;
  _api_flaps_selector_position(): number;
  _api_rudder_position(): number;
  _api_aileron_trim_position(): number;
  _api_elevator_trim_position(): number;
  _api_rudder_trim_position(): number;
  _api_ias_speed_knots(): number;
  _api_true_speed_knots(): number;
  _api_mach(): number;
  _api_vstall_speed_knots(): number;
  _api_heading_deg(): number;
  _api_heading_dot_deg(): number;
  _api_sideslip_deg(): number;
  _api_pitch_deg(): number;
  _api_bank_deg(): number;
  _api_cl(): number;
  _api_aoa_deg(): number;
  _api_cdi(): number;
  _api_total_drag(): number;
  _api_target_heading_deg(): number;
  _api_target_pitch_deg(): number;
  _api_target_bank_deg(): number;
  _api_target_altitude(): number;
  _api_target_vertical_speed(): number;
  _api_target_speed(): number;
  _api_target_true_speed(): number;
  _api_target_mach_speed(): number;
  _api_simulation_speed(): number;
  _api_simulation_pause(): number;
  _api_ground_collision(): number;
  _api_autopilot(): number;
  _api_heading_hold(): number;
  _api_pitch_hold(): number;
  _api_bank_hold(): number;
  _api_yaw_damper(): number;
  _api_turn_coordinator(): number;
  _api_speed_hold(): number;
  _api_true_speed_hold(): number;
  _api_mach_speed_hold(): number;
  _api_altitude_hold(): number;
  _api_vertical_speed_hold(): number;
  _api_atmosphere_sea_level_temperature(): number;
  _api_atmosphere_sea_level_density(): number;
  _api_atmosphere_temperature(): number;
  _api_atmosphere_density(): number;
  _api_latitude(): number;
  _api_longitude(): number;
}

type EmbindString = ArrayBuffer|Uint8Array|Uint8ClampedArray|Int8Array|string;
export interface GearSelectorValue<T extends number> {
  value: T;
}
export type GearSelector = GearSelectorValue<0>|GearSelectorValue<1>|GearSelectorValue<2>;

export interface FlapSelectorValue<T extends number> {
  value: T;
}
export type FlapSelector = FlapSelectorValue<0>|FlapSelectorValue<1>|FlapSelectorValue<5>|FlapSelectorValue<10>|FlapSelectorValue<20>|FlapSelectorValue<25>|FlapSelectorValue<30>;

interface EmbindModule {
  VERSION_STRING: EmbindString;
  api_set_altitude_hold(_0: boolean): void;
  api_set_atmosphere_sea_level_density(_0: number): void;
  api_set_atmosphere_sea_level_temperature(_0: number): void;
  api_set_autopilot(_0: boolean): void;
  api_set_bank_hold(_0: boolean): void;
  api_set_pitch_hold(_0: boolean): void;
  api_set_turn_coordinator(_0: boolean): void;
  api_set_yaw_damper(_0: boolean): void;
  api_set_cdo(_0: number): boolean;
  api_set_dcl(_0: number): boolean;
  api_set_engine_throttle_value(_0: number): boolean;
  api_set_heading_hold(_0: boolean): void;
  api_set_mach_speed_hold(_0: boolean): void;
  api_set_simulation_pause(_0: boolean): boolean;
  api_set_simulation_reset(): void;
  api_set_simulation_speed(_0: number): void;
  api_set_speed_hold(_0: boolean): void;
  api_set_true_speed_hold(_0: boolean): void;
  api_set_target_altitude(_0: number): void;
  api_set_target_bank_deg(_0: number): void;
  api_set_target_heading_deg(_0: number): void;
  api_set_target_pitch_deg(_0: number): void;
  api_set_target_true_speed(_0: number): void;
  api_set_target_speed(_0: number): void;
  api_set_target_mach_speed(_0: number): void;
  api_set_target_vertical_speed(_0: number): void;
  api_set_thrust_to_weight(_0: number): boolean;
  api_set_update_rate(_0: number): void;
  api_set_vertical_speed_hold(_0: boolean): void;
  api_set_wing_area(_0: number): boolean;
  api_set_empty_weight(_0: number): boolean;
  api_set_aileron_position(_0: number): void;
  api_set_elevator_position(_0: number): void;
  api_set_rudder_position(_0: number): void;
  api_set_aileron_trim_position(_0: number): void;
  api_set_rudder_trim_position(_0: number): void;
  api_set_elevator_trim_position(_0: number): void;
  api_set_landing_gear_selector_position(_0: GearSelector): boolean;
  GearSelector: {OFF: GearSelectorValue<0>, UP: GearSelectorValue<1>, DOWN: GearSelectorValue<2>};
  api_set_flaps_selector_position(_0: FlapSelector): boolean;
  FlapSelector: {ZERO: FlapSelectorValue<0>, ONE: FlapSelectorValue<1>, FIVE: FlapSelectorValue<5>, TEN: FlapSelectorValue<10>, TWENTY: FlapSelectorValue<20>, TWENTFIVE: FlapSelectorValue<25>, THIRTY: FlapSelectorValue<30>};
}

export type MainModule = WasmModule & typeof RuntimeExports & EmbindModule;
export default function MainModuleFactory (options?: unknown): Promise<MainModule>;
